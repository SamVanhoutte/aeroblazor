@using GoogleMapsComponents
@using Microsoft.Extensions.Options
@using Microsoft.JSInterop
@using MapOptions = AeroBlazor.Configuration.MapOptions
@inject AeroMapService MapperService
@inject IOptions<MapOptions> MapSettings
@inject IJSRuntime JsRuntime

@if (!string.IsNullOrEmpty(MapSettings?.Value?.GoogleMapKey))
{
    @if (ShowDistance)
    {
        <AeroDistanceDisplay Location="@Marker?.Point" />
    }
    <div style='@($"height:{Height};")'>
        <GoogleMap @ref="@_googleMap" Options="@mapOptions" Height="100%" OnAfterInit="@OnAfterInitAsync"></GoogleMap>
    </div>
}
else
{
    <AeroWarning Error="true">The google maps API key is not configured.</AeroWarning>
}
@code {
    [Parameter] public MapMarker? Marker { get; set; }
    [Parameter] public bool ShowDistance { get; set; } = false;
    [Parameter] public string Height { get; set; } = "400px";
    private GoogleMap? _googleMap;
    private GoogleMapsComponents.Maps.MapOptions? mapOptions;
    private bool MapInitialized;
    private int retries = 0;
    
    protected override async Task OnInitializedAsync()
    {
        mapOptions = await MapperService.GetLayoutAsync();
    }

    private async Task OnAfterInitAsync()
    {
        await InitializeMapAsync();
    }

    private async Task InitializeMapAsync()
    {
        if (Marker != null)
        {
            try
            {
                await MapperService.ShowMarkersAsync(_googleMap, JsRuntime, new List<MapMarker> { Marker }, CheckMapRequirements());
                StateHasChanged();
                MapInitialized = true;
                retries = 0;
            }
            catch (Exception e)
            {
                if (retries++ < 3)
                {
                    await InitializeMapAsync();
                }
            }
        }
    }

    private MapLayout CheckMapRequirements()
    {
        var layout = new MapLayout { CenterMap = true, RedrawNeeded = false, ShowMarkers = true };
        return layout;
    }

}